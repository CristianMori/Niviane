//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeDetail", Namespace="http://schemas.datacontract.org/2004/07/Niviane_Service")]
    [System.SerializableAttribute()]
    public partial class NodeDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte BasicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NodeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Basic {
            get {
                return this.BasicField;
            }
            set {
                if ((this.BasicField.Equals(value) != true)) {
                    this.BasicField = value;
                    this.RaisePropertyChanged("Basic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((this.NodeIDField.Equals(value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessRunning", Namespace="http://schemas.datacontract.org/2004/07/Niviane_Service")]
    [System.SerializableAttribute()]
    public partial class ProcessRunning : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArgumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Arguments {
            get {
                return this.ArgumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArgumentsField, value) != true)) {
                    this.ArgumentsField = value;
                    this.RaisePropertyChanged("Arguments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning {
            get {
                return this.IsRunningField;
            }
            set {
                if ((this.IsRunningField.Equals(value) != true)) {
                    this.IsRunningField = value;
                    this.RaisePropertyChanged("IsRunning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://niviane/", ConfigurationName="ServiceReference1.Niviane", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface Niviane {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/IsAvailable", ReplyAction="http://niviane/Niviane/IsAvailableResponse")]
        bool IsAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/Nodes", ReplyAction="http://niviane/Niviane/NodesResponse")]
        ConsoleClient.ServiceReference1.NodeDetail[] Nodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/Node", ReplyAction="http://niviane/Niviane/NodeResponse")]
        ConsoleClient.ServiceReference1.NodeDetail Node(string NodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/NodeBasic", ReplyAction="http://niviane/Niviane/NodeBasicResponse")]
        bool NodeBasic(string NodeID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/NodePollingOn", ReplyAction="http://niviane/Niviane/NodePollingOnResponse")]
        bool NodePollingOn(string NodeID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/NodePollingOff", ReplyAction="http://niviane/Niviane/NodePollingOffResponse")]
        bool NodePollingOff(string NodeID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/NodeName", ReplyAction="http://niviane/Niviane/NodeNameResponse")]
        bool NodeName(string NodeID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/NodeLocation", ReplyAction="http://niviane/Niviane/NodeLocationResponse")]
        bool NodeLocation(string NodeID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/AllOn", ReplyAction="http://niviane/Niviane/AllOnResponse")]
        bool AllOn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/AllOff", ReplyAction="http://niviane/Niviane/AllOffResponse")]
        bool AllOff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/ProcessRunning", ReplyAction="http://niviane/Niviane/ProcessRunningResponse")]
        ConsoleClient.ServiceReference1.ProcessRunning ProcessRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/ProcessStart", ReplyAction="http://niviane/Niviane/ProcessStartResponse")]
        bool ProcessStart(string Process, string Arguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/ProcessStop", ReplyAction="http://niviane/Niviane/ProcessStopResponse")]
        bool ProcessStop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://niviane/Niviane/VLC", ReplyAction="http://niviane/Niviane/VLCResponse")]
        bool VLC(string Arguments);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NivianeChannel : ConsoleClient.ServiceReference1.Niviane, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NivianeClient : System.ServiceModel.ClientBase<ConsoleClient.ServiceReference1.Niviane>, ConsoleClient.ServiceReference1.Niviane {
        
        public NivianeClient() {
        }
        
        public NivianeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NivianeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NivianeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NivianeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAvailable() {
            return base.Channel.IsAvailable();
        }
        
        public ConsoleClient.ServiceReference1.NodeDetail[] Nodes() {
            return base.Channel.Nodes();
        }
        
        public ConsoleClient.ServiceReference1.NodeDetail Node(string NodeID) {
            return base.Channel.Node(NodeID);
        }
        
        public bool NodeBasic(string NodeID, string Value) {
            return base.Channel.NodeBasic(NodeID, Value);
        }
        
        public bool NodePollingOn(string NodeID, string Value) {
            return base.Channel.NodePollingOn(NodeID, Value);
        }
        
        public bool NodePollingOff(string NodeID, string Value) {
            return base.Channel.NodePollingOff(NodeID, Value);
        }
        
        public bool NodeName(string NodeID, string Value) {
            return base.Channel.NodeName(NodeID, Value);
        }
        
        public bool NodeLocation(string NodeID, string Value) {
            return base.Channel.NodeLocation(NodeID, Value);
        }
        
        public bool AllOn() {
            return base.Channel.AllOn();
        }
        
        public bool AllOff() {
            return base.Channel.AllOff();
        }
        
        public ConsoleClient.ServiceReference1.ProcessRunning ProcessRunning() {
            return base.Channel.ProcessRunning();
        }
        
        public bool ProcessStart(string Process, string Arguments) {
            return base.Channel.ProcessStart(Process, Arguments);
        }
        
        public bool ProcessStop() {
            return base.Channel.ProcessStop();
        }
        
        public bool VLC(string Arguments) {
            return base.Channel.VLC(Arguments);
        }
    }
}
